@using EposRetail.Models
@using EposRetail.Constants
@using EposRetail.Services
@using EntityFrameworkDatabaseLibrary.Models
@inject SalesTransactionServices SalesTransactionServices
@inject SalesItemTransactionServices SalesItemTransactionServices
@inject PrinterManagementService PrinterManagementService
@inject NavigationManager NavigationManager
@inject UserSessionService UserSessionService
@inject GlobalErrorLogService GlobalErrorLogService
<div class="col-md-12 mb-2">
    <div class="d-flex gap-2 mb-2">
        <button class="btn background-colour-light-red d-flex flex-column align-items-center flex-fill"
                @onclick="() => OnPaymentClicked.InvokeAsync(PaymentType.Card)">
            <img src="@CheckoutConstants.Images.CardIcon" class="img-fluid mb-2" />
            <span class="fw-bold">Card</span>
        </button>
        <button class="btn background-colour-light-blue d-flex flex-column align-items-center flex-fill"
                @onclick="OnQtyClicked">
            <img src="images/icons/svg/liquor_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
            <span class="fw-bold">Qty</span>
        </button>
        <button class="btn background-colour-light-green d-flex flex-column align-items-center flex-fill"
                @onclick="() => OnPaymentClicked.InvokeAsync(PaymentType.Cash)">
            <img src="@CheckoutConstants.Images.CashIcon" class="img-fluid mb-2" />
            <span class="fw-bold">Cash</span>
        </button>
        <div class="d-flex gap-1 flex-fill">
            <button class="btn btn-light d-flex flex-column align-items-center flex-fill"
                    @onclick="MoreCheckoutClick">
                <img src="@State.LeftCollapseButtonPanel" class="img-fluid mb-2" />
                <span class="fw-bold">@State.LeftPanelLabel</span>
            </button>
            <button class="btn btn-light d-flex flex-column align-items-center flex-fill"
                    @onclick="RightPanelButtonClick">
                <img src="images/icons/svg/expand_content_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                <span class="fw-bold">Expand</span>
            </button>
        </div>
    </div>

    <div class="@((IsCollapsed) ? "d-none" : "")">
        <div class="col-md-12 mb-2">
            <div class="d-flex gap-2 mb-2">
                <button class="btn background-colour-light-red d-flex flex-column align-items-center flex-fill"
                        @onclick="() => OnVoidLineClicked.InvokeAsync()">
                    <img src="images/icons/svg/remove_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Void Line</span>
                </button>
                <button class="btn background-colour-light-blue d-flex flex-column align-items-center flex-fill"
                        @onclick="() => OnHoldClicked.InvokeAsync()">
                    <img src="images/icons/svg/front_hand_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">@GetHoldButtonText()</span>
                </button>
                <button class="btn background-colour-light-red d-flex flex-column align-items-center flex-fill"
                        @onclick="() => OnVoidBasketClicked.InvokeAsync()">
                    <img src="images/icons/svg/money_off_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Void Basket</span>
                </button>
                <button class="btn background-colour-light-green d-flex flex-column align-items-center flex-fill"
                        @onclick="() => OnEnquiryClicked.InvokeAsync()">
                    <img src="images/icons/svg/search_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Enquiry</span>
                </button>
                <button class="btn d-flex flex-column align-items-center flex-fill @(RefundMode ? "bg-warning" : "background-colour-light-blue")"
                        @onclick="HandleRefundClick">
                    <img src="images/icons/svg/send_money_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Refund</span>
                </button>
                <button class="btn background-colour-light-green d-flex flex-column align-items-center flex-fill"
                        @onclick=HandleOnDiscountClick>
                    <img src="images/icons/svg/loyalty_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Discount</span>
                </button>
                <button class="btn btn-light d-flex flex-column align-items-center flex-fill"
                        @onclick=HandleReceiptClick>
                    <img src="images/icons/svg/receipt_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Receipt</span>
                </button>
                <button class="btn btn-light d-flex flex-column align-items-center flex-fill"
                        @onclick="NavigateToBackoffice">
                    <img src="images/icons/svg/account_balance_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.svg" class="img-fluid mb-2" />
                    <span class="fw-bold">Office</span>
                </button>
            </div>
        </div>
    </div>

</div>

<!-- Receipt History Modal -->
<ReceiptHistoryModal IsVisible="@showReceiptHistoryModal"
                     Transactions="@recentTransactions"
                     LastTransaction="@lastTransaction"
                     OnClose="CloseReceiptHistoryModal" />

<!-- Amount Entry Modal -->
<OtherSalesModal @bind-IsVisible="showAmountModal"
                 State="@State"
                 OnDepartmentWithAmountSelected="HandleDepartmentWithAmount"
                 OnPayoutWithAmount="HandlePayoutWithAmount"
                 OnModalClosed="HandleModalClosed" />

@code {

    [Parameter] public CheckoutState State { get; set; } = new();
    [Parameter] public EventCallback<PaymentType> OnPaymentClicked { get; set; }
    [Parameter] public EventCallback OnVoidLineClicked { get; set; }
    [Parameter] public EventCallback OnVoidBasketClicked { get; set; }
    [Parameter] public EventCallback OnQtyClicked { get; set; }
    [Parameter] public EventCallback OnHoldClicked { get; set; }
    [Parameter] public EventCallback<bool> OnMoreSalesClicked { get; set; }
    [Parameter] public EventCallback OnEnquiryClicked { get; set; }
    [Parameter] public EventCallback OnRefundClicked { get; set; }
    [Parameter] public EventCallback OnDiscountClicked { get; set; }
    [Parameter] public string ButtonWidthAdjustClass { get; set; }
    [Parameter] public EventCallback<decimal> OnAmountEntered { get; set; }
    [Parameter] public EventCallback OnDepartmentSalesModalClosed { get; set; }

    bool RefundMode = false;
    bool IsCollapsed = true;
    private bool showAmountModal = false;

    private async Task MoreCheckoutClick()
    {
        IsCollapsed = !IsCollapsed;
        State.LeftCollapseButtonPanel = IsCollapsed ? CheckoutConstants.Images.AddIcon : CheckoutConstants.Images.HideIcon;
        State.LeftPanelLabel = IsCollapsed ? "More" : "Collapse";
        await OnMoreSalesClicked.InvokeAsync(IsCollapsed);

    }

    private string GetHoldButtonText()
    {
        // Check if there are any held baskets (baskets other than the current active one)
        bool hasHeldBaskets = State.SalesBaskets?.Count > 1;
        return hasHeldBaskets ? "Recall" : "Hold";
    }

    private async Task HandleOnDiscountClick()
    {
        await OnDiscountClicked.InvokeAsync();
    }

    private void NavigateToBackoffice()
    {
        NavigationManager.NavigateTo("/backoffice");
    }

    private async Task RightPanelButtonClick()
    {
        // Show the amount entry modal instead of the original functionality
        showAmountModal = true;
        StateHasChanged();
    }

    private async Task HandleDepartmentWithAmount((string department, decimal amount) data)
    {
        // This will be handled by the parent component (Checkout.razor)
        // You can either invoke an event callback or handle it directly here
        await OnDepartmentWithAmountSelected.InvokeAsync(data);
    }

    // Add this parameter to the component
    [Parameter] public EventCallback<(string department, decimal amount)> OnDepartmentWithAmountSelected { get; set; }

    // Add this parameter
    [Parameter] public EventCallback<(PayoutType payoutType, decimal amount)> OnPayoutWithAmountSelected { get; set; }

    // Add this handler method
    private async Task HandlePayoutWithAmount((PayoutType payoutType, decimal amount) data)
    {
        await OnPayoutWithAmountSelected.InvokeAsync(data);
    }

    private async Task HandleModalClosed()
    {
        showAmountModal = false;
        StateHasChanged();
        await OnDepartmentSalesModalClosed.InvokeAsync();
    }

    private async Task HandleRefundClick()
    {
        RefundMode = !RefundMode;
        await OnRefundClicked.InvokeAsync();
    }
    private async void HandleReceiptClick(MouseEventArgs args)
    {

    }

    // Add new fields for receipt history
    private bool showReceiptHistoryModal = false;
    private List<SalesTransaction>? recentTransactions;
    private SalesTransaction? lastTransaction;
    private bool isLoadingTransactions = false;

    private async Task HandleReceiptClick()
    {
        await LoadLast10Transactions();
        showReceiptHistoryModal = true;
        StateHasChanged();
    }

    private async Task LoadLast10Transactions()
    {
        try
        {
            isLoadingTransactions = true;

            // Get the last 10 transactions ordered by most recent first
            var allTransactions = await SalesTransactionServices.GetByConditionAsync(
                t => t.DayLog_Id == UserSessionService.GetCurrentDayLogId(), // Get all transactions
                false // Don't include related data for performance
            );

            recentTransactions = allTransactions
                .OrderByDescending(t => t.Sale_Date)
                .Take(10)
                .ToList();

            // Get the most recent transaction as the "last transaction"
            lastTransaction = recentTransactions?.FirstOrDefault();
        }
        catch (Exception ex)
        {
            await GlobalErrorLogService.LogErrorAsync(ex, nameof(LoadLast10Transactions), "Loading recent transactions");
            recentTransactions = new List<SalesTransaction>();
            lastTransaction = null;
        }
        finally
        {
            isLoadingTransactions = false;
        }
    }

    private async Task CloseReceiptHistoryModal()
    {
        showReceiptHistoryModal = false;
        StateHasChanged();
    }
}