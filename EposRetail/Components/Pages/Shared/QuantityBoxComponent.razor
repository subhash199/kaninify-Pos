@if (IsVisible)
{
    <div class="position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow-lg">
        <div class="mb-3">
            <label class="form-label">Enter Quantity:</label>
            <input type="number" @ref="quantityInput" class="form-control"
                   @bind="Value" @bind:event="oninput" />
        </div>
        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            <button class="btn btn-primary" @onclick="Apply">Apply</button>
        </div>
    </div>
}

@code {
    private ElementReference quantityInput;

    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public EventCallback OnApply { get; set; }

    private async Task Cancel()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private async Task Apply()
    {
        await ValueChanged.InvokeAsync(Value);
        await OnApply.InvokeAsync();
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            await quantityInput.FocusAsync();
        }
    }
}