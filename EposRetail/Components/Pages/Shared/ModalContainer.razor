@using EposRetail.Models
@using EntityFrameworkDatabaseLibrary.Models
@using EposRetail.Constants

<!-- Generic Message Modal -->
@if (State.ModalSettings.ModalEnum == ModalEnum.ProductActivate ||
State.ModalSettings.ModalEnum == ModalEnum.ProductNotFound || State.ModalSettings.ModalEnum == ModalEnum.GenericProduct)
{
    <ProductModal IsVisible="@(State.ModalSettings.ShowModal)"
                  Title="@State.ModalSettings.ModalTitle"
                  Product="@State.ModalProduct"
                  OnSave="OnProductSave"
                  OnClose="OnModalClose" />
}
else if (State.ModalSettings.ModalEnum == ModalEnum.Transaction)
{
    <TransactionModal IsVisible="@(State.ModalSettings.ShowModal)"
                      Title="@State.ModalSettings.ModalTitle"
                      Message="@State.ModalSettings.ModalMessage"
                      CheckoutAmount="@GetCurrentBasketTotal()"
                      PaymentType="@State.PaymentType"
                      OnClose="OnModalClose"
                      OnConfirm="OnTransactionConfirm" />
}
else
{
    <GenericMessageModal IsVisible="@(State.ModalSettings.ShowModal)"
                         Title="@State.ModalSettings.ModalTitle"
                         Message="@State.ModalSettings.ModalMessage"
                         PrimaryButtonText="@GetPrimaryButtonText()"
                         SecondaryButtonText="@GetSecondaryButtonText()"
                         PrimaryAction="OnModalOk"
                         SecondaryAction="OnModalClose" />
}



@code {
    [Parameter] public CheckoutState State { get; set; }
    [Parameter] public EventCallback OnModalOk { get; set; }
    [Parameter] public EventCallback OnModalClose { get; set; }
    [Parameter] public EventCallback<Product> OnProductSave { get; set; }
    [Parameter] public EventCallback<(decimal Amount, PaymentType PaymentType)> OnTransactionConfirm { get; set; }

    private string GetPrimaryButtonText()
    {
        return State.ModalSettings.ModalEnum switch
        {
            ModalEnum.ProductActivate => "Activate",
            ModalEnum.ProductNotFound => "Add Product",
            ModalEnum.GenericProduct => "Add Product",
            ModalEnum.Error => "OK",
            ModalEnum.Payment => "Confirm",
            ModalEnum.Confirmation => "Yes",
            ModalEnum.Transaction => "Confirm Payment",
            ModalEnum.Default => "OK",
            _ => "OK"
        };
    }

    private string GetSecondaryButtonText()
    {
        return State.ModalSettings.ModalEnum switch
        {
            ModalEnum.ProductActivate => "Cancel",
            ModalEnum.ProductNotFound => "Cancel",
            ModalEnum.Error => "Cancel",
            ModalEnum.Payment => "Cancel",
            ModalEnum.Confirmation => "No",
            ModalEnum.Transaction => "Cancel",
            ModalEnum.Default => "Cancel",
            _ => "Cancel"
        };
    }

    private decimal GetCurrentBasketTotal()
    {
        if (State?.SalesBaskets != null && State.SalesBaskets.Count > State.HoldBasketIndex)
        {
            return (State.SalesBaskets[State.HoldBasketIndex]?.Transaction?.SaleTransaction_Total_Amount -
            (State.SalesBaskets[State.HoldBasketIndex]?.Transaction.SaleTransaction_Cash +
            State.SalesBaskets[State.HoldBasketIndex]?.Transaction.SaleTransaction_Card)) ?? 0;
        }
        return 0;
    }
}