@page "/expiry-management"
@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@inject ProductServices ProductService
@inject DepartmentServices DepartmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject EposRetail.Services.GlobalErrorLogService GlobalErrorLogService
<PageTitle>Expiry Products Management</PageTitle>

<div class="expiry-management-container">
    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading expiry products...</p>
        </div>
    }
    else
    {
        <!-- Header Section -->
        <div class="expiry-header">
            <div class="header-content">
                <div class="header-left">
                    <h1 class="page-title">Expiry Products Management</h1>
                    <p class="page-subtitle">Monitor and manage products approaching expiry</p>
                </div>
                <div class="header-right d-flex align-items-center">
                    <a href="/checkout" class="navigation-btn me-2">
                        <i class="fas fa-shopping-cart"></i>
                        <span>Go to Checkout</span>
                    </a>
                    <a href="/backoffice" class="navigation-btn">
                        <i class="fas fa-arrow-left"></i>
                        <span>Back to Backoffice</span>
                    </a>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-section">
            <div class="filters-content">
                <!-- Date Range -->
                <div class="date-range-group">
                    <div class="date-input-group">
                        <label for="fromDate">From Date:</label>
                        <input type="date" id="fromDate" class="form-control" @bind-value="FromDate" @bind-value:event="oninput" @onchange="OnDateRangeChanged" />
                    </div>
                    <div class="date-input-group">
                        <label for="toDate">To Date:</label>
                        <input type="date" id="toDate" class="form-control" @bind-value="ToDate" @bind-value:event="oninput" @onchange="OnDateRangeChanged" />
                    </div>
                </div>

                <!-- Search and Department Filter -->
                <div class="search-filters">
                    <div class="search-input-group">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" placeholder="Search products..." 
                                   @bind-value="SearchQuery" @bind-value:event="oninput" @onkeyup="OnSearchKeyUp" />
                            @if (!string.IsNullOrEmpty(SearchQuery))
                            {
                                <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="filter-group">
                        <select class="form-select" @bind-value="SelectedDepartmentId" @bind-value:event="oninput" @onchange="OnDepartmentFilterChanged">
                            <option value="0">All Departments</option>
                            @if (AllDepartments != null)
                            {
                                @foreach (var department in AllDepartments.Where(d => d.Is_Activated))
                                {
                                    <option value="@department.Id">@department.Department_Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="summary-card expired">
                <div class="card-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="card-content">
                    <div class="card-value">@FilteredProducts.Count(p => p.Expiry_Date.Date < DateTime.Now.Date)</div>
                    <div class="card-label">Already Expired</div>
                </div>
            </div>
            <div class="summary-card expiring-soon">
                <div class="card-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="card-content">
                    <div class="card-value">@FilteredProducts.Count(p => p.Expiry_Date.Date >= DateTime.Now.Date && p.Expiry_Date.Date <= DateTime.Now.Date.AddDays(7))</div>
                    <div class="card-label">Expiring in 7 Days</div>
                </div>
            </div>
            <div class="summary-card total">
                <div class="card-icon">
                    <i class="fas fa-box"></i>
                </div>
                <div class="card-content">
                    <div class="card-value">@FilteredProducts.Count()</div>
                    <div class="card-label">Total Products</div>
                </div>
            </div>
        </div>

        <!-- Products Table -->
        <div class="table-container">
            <div class="table-header">
                <h3>Expiry Products (@FilteredProducts.Count())</h3>
            </div>

            @if (FilteredProducts.Any())
            {
                <div class="modern-table">
                    <div class="table-row table-header-row">
                        <div class="table-cell">Product Name</div>
                        <div class="table-cell">Department</div>
                        <div class="table-cell">Expiry Date</div>
                        <div class="table-cell">Days Until Expiry</div>
                        <div class="table-cell">Stock Quantity</div>
                        <div class="table-cell">Status</div>
                        <div class="table-cell">Actions</div>
                    </div>

                    @foreach (var product in FilteredProducts)
                    {
                        <div class="table-row @GetExpiryRowClass(product)">
                            <div class="table-cell">
                                <div class="product-info">
                                    <span class="product-name">@product.Product_Name</span>
                                    @if (!string.IsNullOrEmpty(product.Product_Barcode))
                                    {
                                        <span class="product-barcode">@product.Product_Barcode</span>
                                    }
                                </div>
                            </div>
                            <div class="table-cell">
                                <span class="department-name">@GetDepartmentName(product.Department_ID)</span>
                            </div>
                            <div class="table-cell">
                                <span class="expiry-date">@product.Expiry_Date.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="table-cell">
                                <span class="days-until-expiry @GetDaysClass(product)">@CalculateDaysUntilExpiry(product)</span>
                            </div>
                            <div class="table-cell">
                                <span class="stock-quantity">@(product.ShelfQuantity + product.StockroomQuantity)</span>
                            </div>
                            <div class="table-cell">
                                <span class="status-badge @GetStatusClass(product)">@GetExpiryStatus(product)</span>
                            </div>
                            <div class="table-cell">
                                <div class="action-buttons">
                                    @if (product.Expiry_Date.Date < DateTime.Now.Date)
                                    {
                                        <button class="btn btn-danger btn-sm" @onclick="() => MarkAsExpired(product)">
                                            <i class="fas fa-trash"></i> Mark Expired
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => AddToPromotion(product)">
                                            <i class="fas fa-tag"></i> Add to Promotion
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-data">
                    <div class="no-data-icon">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <h4>No Expiry Products Found</h4>
                    <p>No products found matching your criteria in the selected date range.</p>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool IsLoading = true;
    private List<Product> AllProducts = new();
    private List<Product> FilteredProducts = new();
    private List<Department> AllDepartments = new();
    
    private DateTime FromDate = DateTime.Now.Date;
    private DateTime ToDate = DateTime.Now.Date.AddDays(7);
    private string SearchQuery = string.Empty;
    private int SelectedDepartmentId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        IsLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            // Load all departments
            AllDepartments = (await DepartmentService.GetAllAsync(false)).ToList().OrderBy(o=>o.Department_Name).ToList();
            
            // Load products with expiry dates in the specified range
            await LoadExpiryProducts();
        }
        catch (Exception ex)
        {
            await GlobalErrorLogService.LogErrorAsync(ex, nameof(LoadData), "Loading expiry management data");
        }
    }

    private async Task LoadExpiryProducts()
    {
        try
        {
            // Get products that are activated and have expiry dates within the range
            var products = await ProductService.GetByConditionAsync(
                p => p.Is_Activated == true && 
                     p.Expiry_Date.Date >= FromDate.Date.ToUniversalTime() && 
                     p.Expiry_Date.Date <= ToDate.Date.ToUniversalTime() &&
                     (p.ShelfQuantity > 0 || p.StockroomQuantity > 0),
                false
            );

            AllProducts = products.OrderBy(p => p.Expiry_Date).ThenBy(p => p.Product_Name).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await GlobalErrorLogService.LogErrorAsync(ex, nameof(LoadExpiryProducts), "Loading products with expiry dates");
            AllProducts = new List<Product>();
            FilteredProducts = new List<Product>();
        }
    }

    private void ApplyFilters()
    {
        var filtered = AllProducts.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            filtered = filtered.Where(p => 
                p.Product_Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(p.Product_Barcode) && p.Product_Barcode.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply department filter
        if (SelectedDepartmentId > 0)
        {
            filtered = filtered.Where(p => p.Department_ID == SelectedDepartmentId);
        }

        FilteredProducts = filtered.OrderBy(p => p.Expiry_Date).ThenBy(p => p.Product_Name).ToList();
        StateHasChanged();
    }

    private async Task OnDateRangeChanged()
    {
        if (FromDate > ToDate)
        {
            ToDate = FromDate.AddDays(7);
        }
        
        IsLoading = true;
        StateHasChanged();
        
        await LoadExpiryProducts();
        
        IsLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        ApplyFilters();
        await Task.Delay(1);
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;
        ApplyFilters();
    }

    private async Task OnDepartmentFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int departmentId))
        {
            SelectedDepartmentId = departmentId;
            ApplyFilters();
        }
        await Task.Delay(1);
    }

    private string GetDepartmentName(int departmentId)
    {
        var department = AllDepartments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Department_Name ?? "Unknown";
    }

    private int CalculateDaysUntilExpiry(Product product)
    {
        return (product.Expiry_Date.Date - DateTime.Now.Date).Days;
    }

    private string GetExpiryStatus(Product product)
    {
        var daysUntilExpiry = CalculateDaysUntilExpiry(product);
        
        if (daysUntilExpiry < 0)
            return "Expired";
        else if (daysUntilExpiry == 0)
            return "Expires Today";
        else if (daysUntilExpiry <= 3)
            return "Critical";
        else if (daysUntilExpiry <= 7)
            return "Warning";
        else
            return "Normal";
    }

    private string GetExpiryRowClass(Product product)
    {
        var daysUntilExpiry = CalculateDaysUntilExpiry(product);
        
        if (daysUntilExpiry < 0)
            return "expired-row";
        else if (daysUntilExpiry <= 3)
            return "critical-row";
        else if (daysUntilExpiry <= 7)
            return "warning-row";
        else
            return "normal-row";
    }

    private string GetStatusClass(Product product)
    {
        var daysUntilExpiry = CalculateDaysUntilExpiry(product);
        
        if (daysUntilExpiry < 0)
            return "status-expired";
        else if (daysUntilExpiry <= 3)
            return "status-critical";
        else if (daysUntilExpiry <= 7)
            return "status-warning";
        else
            return "status-normal";
    }

    private string GetDaysClass(Product product)
    {
        var daysUntilExpiry = CalculateDaysUntilExpiry(product);
        
        if (daysUntilExpiry < 0)
            return "days-expired";
        else if (daysUntilExpiry <= 3)
            return "days-critical";
        else if (daysUntilExpiry <= 7)
            return "days-warning";
        else
            return "days-normal";
    }

    private async Task MarkAsExpired(Product product)
    {
        try
        {
            // Set quantities to 0 and update the product
            product.ShelfQuantity = 0;
            product.StockroomQuantity = 0;
            
            await ProductService.UpdateAsync(product);
            
            // Remove from current list
            FilteredProducts.Remove(product);
            AllProducts.Remove(product);
            
            StateHasChanged();
            
            // Show success message (you might want to implement a toast notification)
            await JSRuntime.InvokeVoidAsync("alert", $"Product '{product.Product_Name}' marked as expired.");
        }
        catch (Exception ex)
        {
            await GlobalErrorLogService.LogErrorAsync(ex, nameof(MarkAsExpired), "Marking product as expired");
            await JSRuntime.InvokeVoidAsync("alert", "Error marking product as expired.");
        }
    }

    private async Task AddToPromotion(Product product)
    {
        // Navigate to promotion page or show promotion modal
        // This would depend on your promotion management implementation
        await JSRuntime.InvokeVoidAsync("alert", $"Add '{product.Product_Name}' to promotion feature coming soon!");
    }
}